# setup.sh - Configures a build environment.
# by Trever Fischer <wm161@wm161.net>
#
# To use, add the following to your .bashrc:
# source /path/to/setup.sh
#
# To configure, export the following variables before sourcing this file:
#   BUILDENV_HOME - The place to look for your *-env.d/ files. Defaults to `dirname /path/to/setup.sh`
#   BUILDENV_PREFIX - Where you will install your sources. Defaults to /opt/buildenv/

export BUILDENV_VERSION="0.1.0"
export BUILDENV_HOME=${BUILDENV_HOME:-`dirname $BASH_SOURCE`}
export BUILDENV_PREFIX=${BUILDENV_PREFIX:-/opt/buildenv}
export BUILDENV_BUILD_ROOT=${BUILDENV_BUILD:-$HOME/build/}
export BUILDENV_SRC_ROOT=${BUILDENV_SRC:-$HOME/Projects/}
export BUILDENV_LOADED=""
export BUILDENV_EXTENSIONS=""

source $BUILDENV_HOME/lib/buildenv/hooks.sh
source $BUILDENV_HOME/lib/buildenv/vars.sh
source $BUILDENV_HOME/lib/buildenv/prompt.sh
source $BUILDENV_HOME/lib/buildenv/aliases.sh

function _buildenv_debug() {
  if [ -n "$BUILDENV_DEBUG" ];then
    echo "D: $@" 1>&2
  fi
}

function _buildenv_is_active() {
  if [ -z "$BUILDENV_MASTER" ];then
    echo "Must be run within a buildenv."
    return 1
  fi
  return 0
}

# Sources a file if it exists
# Usage:
# _buildenv_source_file /path/to/file
#
# Returns 0 on success, 1 on failure.
function _buildenv_source_file() {
  if [ -f "$1" ];then
    _buildenv_debug "Sourcing $1"
    source $1
    return 0
  fi
  return 1
}

# Searches for and loads a file
# Checks the following locations:
#  $BUILDENV_HOME/$file
#  $BUILDENV_HOME/config/$BUILDENV_CONFIG/$file
#  ~/.buildenv/$file
#  ~/.buildenv/config/$BUILDENV_CONFIG/$file
function _buildenv_load_file() {
  _buildenv_source_file $BUILDENV_HOME/$1
  _buildenv_source_file $BUILDENV_HOME/config/$BUILDENV_CONFIG/$1
  _buildenv_source_file ~/.buildenv/$1
  _buildenv_source_file ~/.buildenv/config/$BUILDENV_CONFIG/$1
}

function _buildenv_is_loaded() {
  if [[ "$BUILDENV_LOADED" != "${BUILDENV_LOADED/ $1 /}" ]];then
    return 0
  fi
  return 1
}

function _buildenv_declare_dependency() {
  _buildenv_load $@
}

function _buildenv_load() {
  if [ -z "$1" ];then
    echo "Usage: _buildenv_load package-name"
    return
  fi
  local _envname=$1
  if _buildenv_is_loaded $_envname;then
    return
  fi
  export BUILDENV_PATH=${BUILDENV_PREFIX}/$_envname
  _buildenv_pkg_set PATH $_envname "$BUILDENV_PATH"
  export BUILDENV_LOADED=" $_envname$BUILDENV_LOADED"
  _buildenv_source_file "${BUILDENV_HOME}/environments/$_envname.sh"
  _buildenv_set PATH "$BUILDENV_PATH/bin:$PATH"
  _buildenv_set LD_LIBRARY_PREFIX "$BUILDENV_PATH/lib/:$LD_LIBRARY_PREFIX"
  echo "Loaded $_envname environment."
  _buildenv_hook buildenv-loaded
}

function _buildenv_unload() {
  if [ -z "$1" ];then
    echo "Usage: _buildenv_unload package-name"
    return
  fi
  _buildenv_env_hook "_teardown" $_envname
  BUILDENV_LOADED=${BUILDENV_LOADED/ $1 / }
  _buildenv_hook buildenv-changed
}

function _buildenv_autodetect() {
  _buildenv_auto_scm_url=$(git config --local --get remote.origin.url)
  _buildenv_auto_scm="git"
  if [ -n "$_buildenv_auto_git_url" ];then
    _buildenv_auto_name=$(basename "${_buildenv_git_url#*:}" .git)
    return 0
  else
    _buildenv_auto_name=$(basename `pwd`)
  fi
}

function _buildenv_complete() { 
  local cur prev environs
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  for e in $(ls $BUILDENV_HOME/environments/*);do
    e=`basename $e .sh`
    environs="$environs $e"
  done
  for e in $(find $BUILDENV_PREFIX -maxdepth 1 -mindepth 1 -type d);do
    e=`basename $e`
    environs="$environs $e"
  done

  COMPREPLY=( $(compgen -W "${environs}" -- ${cur}) )
  return 0
}

function _buildenv_ext_complete() { 
  local cur prev environs
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  for e in $(ls $BUILDENV_HOME/extensions/*);do
    e=`basename $e .sh`
    environs="$environs $e"
  done
  for e in $(find $BUILDENV_PREFIX -maxdepth 1 -mindepth 1 -type d);do
    e=`basename $e`
    environs="$environs $e"
  done

  COMPREPLY=( $(compgen -W "${environs}" -- ${cur}) )
  return 0
}

complete -F _buildenv_complete buildenv

complete -F _buildenv_ext_complete buildenv_load_extension

function buildenv_add_dependency() {
  _buildenv_is_active || return
  local _env="$BUILDENV_HOME/environments/$BUILDENV_MASTER/_load.sh"
  if [ ! -f "$_env" ];then
    mkdir -p `dirname "$_env"`
    echo "# Autogenerated by $0" > $_env
  fi
  echo "_buildenv_declare_dependency '$1'" >> $_env
  echo "Added dependency to $_env"
}

function buildenv_load_extension() {
  if [[ "$_buildenv_loading_ext" != "$1" ]];then
    if [[ "$BUILDENV_EXTENSIONS" == "${BUILDENV_EXTENSIONS/ $1 /}" ]];then
      export BUILDENV_EXTENSIONS=" ${1}${BUILDENV_EXTENSIONS}"
      _buildenv_loading_ext=$1
      _buildenv_ext_hook "_load" $1
      unset _buildenv_loading_ext
    fi
  fi
}

function _buildenv_load_defaults() {
  local _parent=$(readlink /proc/$PPID/exe)
  _parent=${_parent##*/bin/}
  _buildenv_load_config $USER
#  _buildenv_load_config $_parent
#  _buildenv_load_config $TERM
#  _buildenv_load_config $DESKTOP_SESSION
#  local _host=$HOSTNAME
#  while [ "${_host}" != "${_host/./}" ];do
#    _buildenv_load_config $_host
#    _host=${_host#*.}
#  done
}

function _buildenv_load_config() {
  local _config="$BUILDENV_HOME/config/$1.sh"
  local _ret=1
  export BUILDENV_OLD_CONFIG=${BUILDENV_CONFIG}
  export BUILDENV_CONFIG=$1
  _buildenv_debug "Loading config from $_config"
  if _buildenv_source_file "$_config";then
    _ret=0
  fi
  _config="~/.local/share/buildenv/config/$1.sh"
  _buildenv_debug "Loading user config from $_config"
  if _buildenv_source_file "$_config";then
    _ret=0
  fi
  _buildenv_hook load-config
  return $_ret
}

function buildenv() {
  _buildenv_autodetect
  local _envs_to_load=${@:-$_buildenv_auto_name}
  if [ -z "$_envs_to_load" ];then
    echo "Usage: buildenv package-name"
    return 0
  fi

  for _envname in $_envs_to_load;do
    if [ -z "$BUILDENV_MASTER" ];then
      export BUILDENV_MASTER=$_envname
      _buildenv_hook firstrun
    fi
    _buildenv_load $_envname
  done
  _buildenv_save CONFIG_SITE
  export CONFIG_SITE="${BUILDENV_HOME}/config.site"
  echo -e "Loaded environments: \E[1;33m$BUILDENV_LOADED\E[0m"
  echo -e "Master environment: \E[1;32m$BUILDENV_MASTER\E[0m"
  _buildenv_hook buildenv-changed
}

# Change to the source directory
function buildenv_cs() {
  cd $BUILDENV_SOURCE
}

# Change to the build directory
function buildenv_cb() {
  if [ ! -d "$BUILDENV_BUILD" ];then
    echo "Creating new build directory in $BUILDENV_BUILD"
    mkdir -p $BUILDENV_BUILD
  fi
  cd $BUILDENV_BUILD
}

function buildenv_build() {
  cb
  echo "Building in $BUILDENV_BUILD"
  if [ -f "$BUILDENV_SOURCE/CMakeLists.txt" ];then
    echo "Running cmake"
    cmake -DCMAKE_INSTALL_PREFIX=$(_buildenv_pkg_get PATH $BUILDENV_MASTER) $BUILDENV_SOURCE
  else
    echo "Don't know how to handle this build system!"
  fi
}

function buildenv_report() {
  echo "Buildenv $BUILDENV_VERSION loaded."
  echo "Home: $BUILDENV_HOME"
  echo "Build root: $BUILDENV_BUILD_ROOT"
  echo "Source root: $BUILDENV_SOURCE_ROOT"
  echo "Current buildenv: $BUILDENV_MASTER"
  echo "Extensions: $BUILDENV_EXTENSIONS"
  _buildenv_hook report
}

export PROMPT_COMMAND="_buildenv_build_prompt;$PROMPT_COMMAND"
_buildenv_load_defaults
_buildenv_debug "Buildenv $BUILDENV_VERSION loaded."
_buildenv_hook init
