# setup.sh - Configures a build environment.
# by Trever Fischer <wm161@wm161.net>
#
# To use, add the following to your .bashrc:
# source /path/to/setup.sh
#
# To configure, export the following variables before sourcing this file:
#   BUILDENV_HOME - The place to look for your *-env.d/ files. Defaults to `dirname /path/to/setup.sh`
#   BUILDENV_PREFIX - Where you will install your sources. Defaults to /opt/buildenv/

#export BUILDENV_DEBUG="1"

export BUILDENV_VERSION="0.1.0"
export BUILDENV_HOME=${BUILDENV_HOME:-`dirname $BASH_SOURCE`}
export BUILDENV_PREFIX=${BUILDENV_PREFIX:-/opt/buildenv}
export BUILDENV_BUILD_ROOT=${BUILDENV_BUILD:-$HOME/build/}
export BUILDENV_SRC_ROOT=${BUILDENV_SRC:-$HOME/Projects/}
export BUILDENV_LOADED=""
export BUILDENV_EXTENSIONS=""

source $BUILDENV_HOME/lib/load.sh
_buildenv_lib_include buildenv/debug.sh
_buildenv_lib_include buildenv/hooks.sh
_buildenv_lib_include buildenv/buildenv.sh
_buildenv_lib_include buildenv/prompt.sh

function _buildenv_complete() { 
  local cur prev environs
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  for e in $(ls $BUILDENV_HOME/environments/*);do
    e=`basename $e .sh`
    environs="$environs $e"
  done
  for e in $(find $BUILDENV_PREFIX -maxdepth 1 -mindepth 1 -type d);do
    e=`basename $e`
    environs="$environs $e"
  done

  COMPREPLY=( $(compgen -W "${environs}" -- ${cur}) )
  return 0
}

function _buildenv_ext_complete() { 
  local cur prev environs
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  for e in $(ls $BUILDENV_HOME/extensions/*);do
    e=`basename $e .sh`
    environs="$environs $e"
  done
  for e in $(find $BUILDENV_PREFIX -maxdepth 1 -mindepth 1 -type d);do
    e=`basename $e`
    environs="$environs $e"
  done

  COMPREPLY=( $(compgen -W "${environs}" -- ${cur}) )
  return 0
}

complete -F _buildenv_complete buildenv

complete -F _buildenv_ext_complete buildenv_load_extension

function buildenv_add_dependency() {
  _buildenv_is_active || return
  local _env="$BUILDENV_HOME/environments/$BUILDENV_MASTER/_load.sh"
  if [ ! -f "$_env" ];then
    mkdir -p `dirname "$_env"`
    echo "# Autogenerated by $0" > $_env
  fi
  echo "_buildenv_declare_dependency '$1'" >> $_env
  echo "Added dependency to $_env"
}

function buildenv_load_extension() {
  if [[ "$_buildenv_loading_ext" != "$1" ]];then
    if [[ "$BUILDENV_EXTENSIONS" == "${BUILDENV_EXTENSIONS/ $1 /}" ]];then
      export BUILDENV_EXTENSIONS=" ${1}${BUILDENV_EXTENSIONS}"
      _buildenv_loading_ext=$1
      _buildenv_ext_hook "_load" $1
      unset _buildenv_loading_ext
    fi
  fi
}

function buildenv() {
  _buildenv_autodetect
  local _envs_to_load=${@:-$_buildenv_auto_name}
  if [ -z "$_envs_to_load" ];then
    echo "Usage: buildenv package-name"
    return 0
  fi

  for _envname in $_envs_to_load;do
    if [ -z "$BUILDENV_MASTER" ];then
      export BUILDENV_MASTER=$_envname
      _buildenv_hook firstrun
    fi
    _buildenv_load $_envname
  done
  _buildenv_save CONFIG_SITE
  export CONFIG_SITE="${BUILDENV_HOME}/config.site"
  echo -e "Loaded environments: \E[1;33m$BUILDENV_LOADED\E[0m"
  echo -e "Master environment: \E[1;32m$BUILDENV_MASTER\E[0m"
  _buildenv_hook buildenv-changed
}

# Change to the source directory
function buildenv_cs() {
  cd $BUILDENV_SOURCE
}

# Change to the build directory
function buildenv_cb() {
  if [ ! -d "$BUILDENV_BUILD" ];then
    echo "Creating new build directory in $BUILDENV_BUILD"
    mkdir -p $BUILDENV_BUILD
  fi
  cd $BUILDENV_BUILD
}

function buildenv_build() {
  cb
  echo "Building in $BUILDENV_BUILD"
  if [ -f "$BUILDENV_SOURCE/CMakeLists.txt" ];then
    echo "Running cmake"
    cmake -DCMAKE_INSTALL_PREFIX=$(_buildenv_pkg_get PATH $BUILDENV_MASTER) $BUILDENV_SOURCE
  else
    echo "Don't know how to handle this build system!"
  fi
}

function buildenv_report() {
  echo "Buildenv $BUILDENV_VERSION loaded."
  echo "Home: $BUILDENV_HOME"
  echo "Build root: $BUILDENV_BUILD_ROOT"
  echo "Source root: $BUILDENV_SRC_ROOT"
  echo "Current buildenv: $BUILDENV_MASTER"
  echo "Extensions: $BUILDENV_EXTENSIONS"
  _buildenv_hook report
}

function buildenv_update() {
  _buildenv_lib_include buildenv/update.sh
  _buildenv_update_check
  if [ $? -eq 0 ];then
    echo "Downloading update..."
    _buildenv_apply_update
    echo "Reloading buildenv..."
    source $BUILDENV_HOME/setup.sh
  else
    echo "No updates available."
  fi
}

export PROMPT_COMMAND="_buildenv_build_prompt;$PROMPT_COMMAND"
_buildenv_load_defaults
_buildenv_debug "Buildenv $BUILDENV_VERSION loaded."
_buildenv_hook init
if [ -f $BUILDENV_HOME/.update-available ];then
  echo "An update is available. Run buildenv_update to update."
else
  $BUILDENV_HOME/background-update.sh 2>&1 >/dev/null
fi
